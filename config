#!/bin/sh 
#
# Copyright 1999 Aaron Wiebe <epiphani@solarz.net>
# Based roughly on configure for Dreamforge, by Michael Graff <explorer@flame.org>
# You may distribute this file without changes freely providing this notice
# remains intact. 
#
if [ ! -f Makefile ] ; then  
echo "You've not run configure, please run that first."
exit
fi

ECHO='echo';
test -z `echo -n` && ECHO='echo -n';

##############   SET THESE VARIABLES CORRECTLY!@ ##############
#
BASENAME=`grep 'BASENAME' include/patchlevel.h | sed s/'.define BASENAME '// | sed s/'\"'//g | xargs $ECHO`
BRANCH=`grep 'BRANCH ' include/patchlevel.h | sed s/'.define BRANCH '// | sed s/'\"'//g | xargs $ECHO`
MAJOR=`grep 'MAJOR' include/patchlevel.h | sed s/'.define MAJOR '// | xargs $ECHO`
MINOR=`grep 'MINOR' include/patchlevel.h | sed s/'.define MINOR '// | xargs $ECHO`
PATCH=`grep 'PATCH ' include/patchlevel.h | sed s/'.define PATCH '// | xargs $ECHO`
PATCH1=`grep 'PATCH1 ".*"' include/patchlevel.h | sed 's#.define PATCH1 "\(.*\)"#\1#' | xargs $ECHO`
PATCH2=`grep 'PATCH2 ".*"' include/patchlevel.h | sed 's#.define PATCH2 "\(.*\)"#\1#' | xargs $ECHO`
PATCH3=`grep 'PATCH3 ".*"' include/patchlevel.h | sed 's#.define PATCH3 "\(.*\)"#\1#' | xargs $ECHO`
IRCD=`printf '%s(%s)-%i.%i(%i)%s%s%s' ${BASENAME} ${BRANCH} ${MAJOR} ${MINOR} ${PATCH} ${PATCH1} ${PATCH2} ${PATCH3}`
OPTIONS_H="include/options.h"
##
##
# Now we look to options.h, and if it exists (has been run already)
# then we pull the defaults from there.  If not, we continue with the 
# script defaults.
#

if [ -f $OPTIONS_H ] ; then  
#
# First off, the things that accually have settings.
#
FDLIMIT="`grep 'HARD_FDLIMIT_' $OPTIONS_H | sed s/'.define HARD_FDLIMIT_  '// | xargs $ECHO`"
MAXUSERS="`grep 'INIT_MAXCLIENTS' $OPTIONS_H | sed s/'.define INIT_MAXCLIENTS '// | xargs $ECHO`"
MAXBUF="`grep 'MAX_BUFFER' $OPTIONS_H | sed s/'.define MAX_BUFFER '// | xargs $ECHO`"
DPATH="`grep 'DPATH' $OPTIONS_H | sed s/'.define DPATH '// | sed s/'\"'//g | xargs $ECHO`"
SPATH="`grep 'SPATH' $OPTIONS_H | sed s/'.define SPATH '// | sed s/'\"'//g | xargs $ECHO`"
MAXSENDQ="`grep 'define MAXSENDQLENGTH' $OPTIONS_H | sed s/'.define MAXSENDQLENGTH '// | xargs $ECHO`"
BUFPOOL="`grep 'define BUFFERPOOL' $OPTIONS_H | sed s/'.define BUFFERPOOL '// | xargs $ECHO`"
SERVICES_NAME="`grep 'SERVICES_NAME' $OPTIONS_H | sed s/'.define SERVICES_NAME '// | xargs $ECHO`"
MHOST="`grep 'MONITOR_HOST' $OPTIONS_H | sed s/'.define MONITOR_HOST '// | sed s/'\"'//g | xargs $ECHO`"
LOCALKLINE="`grep 'SERVER_KLINE_ADDRESS' $OPTIONS_H | sed s/'.define SERVER_KLINE_ADDRESS '// | sed s/'\"'//g | xargs $ECHO`"
NETWORKKLINE="`grep 'NETWORK_KLINE_ADDRESS' $OPTIONS_H | sed s/'.define NETWORK_KLINE_ADDRESS '// | sed s/'\"'//g | xargs $ECHO`"
IRCDCONF_DELIMITER="`grep 'IRCDCONF_DELIMITER' $OPTIONS_H | sed s/'.define IRCDCONF_DELIMITER '// | xargs $ECHO`"
STAFF_ADDRESS="`grep 'STAFF_ADDRESS' $OPTIONS_H | sed s/'.define STAFF_ADDRESS'// | xargs $ECHO`"
LOCALOP_ADDRESS="`grep 'LOCALOP_ADDRESS' $OPTIONS_H | sed s/'.define LOCALOP_ADDRESS'// | xargs $ECHO`"
HELPER_ADDRESS="`grep 'HELPER_ADDRESS' $OPTIONS_H | sed s/'.define HELPER_ADDRESS'// | xargs $ECHO`"
#
# Now to pull yucky defaults out.
#
SUNOS="`grep 'SUNDBE' $OPTIONS_H | sed s/'.define SUNDBE'// | xargs $ECHO`"
if [ -n "$SUNOS" ] ; then
   SUNOS=""
else
   SUNOS="1"
fi
SOLARIS="`grep 'OS_SOLARIS' $OPTIONS_H | sed s/'.define OS_SOLARIS'// | xargs $ECHO`"
if [ -n "$SOLARIS" ] ; then
   SOLARIS=""
else
   SOLARIS="1"
fi
STATSN="`grep 'STATS_NOTICE' $OPTIONS_H | sed s/'.define STATS_NOTICE'// | xargs $ECHO`"
if [ -n "$STATSN" ] ; then
   STATSN=""
else 
   STATSN="1"
fi
SMOTD="`grep 'SHORT_MOTD' $OPTIONS_H | sed s/'.define SHORT_MOTD'// | xargs $ECHO`"
if [ -n "$SMOTD" ] ; then
   SMOTD=""
else
   SMOTD="1"
fi
HUB="`grep 'HUB' $OPTIONS_H | sed s/'.define HUB'// | xargs $ECHO`"
if [ -n "$HUB" ] ; then
   HUB=""
else
   HUB="1"
fi
WINGATE="`grep 'define WINGATE' $OPTIONS_H | sed s/'.define WINGATE_NOTICE'// | xargs $ECHO`"
if [ -n "$WINGATE" ] ; then
   WINGATE=""
else
   WINGATE="1"
fi
SYSLOG="`grep '\(un\)*def\(ine\)* USE_SYSLOG' $OPTIONS_H | sed s/'.define USE_SYSLOG'// | xargs $ECHO`"
if [ -n "$SYSLOG" ] ; then
   SYSLOG=""
else
   SYSLOG="1"
fi
LOGKILL="`grep 'SYSLOG_KILL' $OPTIONS_H | sed s/'.define SYSLOG_KILL'// | xargs $ECHO`"
if [ -n "$LOGKILL" ] ; then
   LOGKILL=""
else
   LOGKILL="1"
fi
LOGSQUIT="`grep 'SYSLOG_SQUIT' $OPTIONS_H | sed s/'.define SYSLOG_SQUIT'// | xargs $ECHO`"
if [ -n "$LOGSQUIT" ] ; then
   LOGSQUIT=""
else
   LOGSQUIT="1"
fi
LOGCONN="`grep 'SYSLOG_CONNECT' $OPTIONS_H | sed s/'.define SYSLOG_CONNECT'// | xargs $ECHO`"
if [ -n "$LOGCONN" ] ; then
   LOGCONN=""
else
   LOGCONN="1"
fi 
SOPER="`grep 'SYSLOG_OPER' $OPTIONS_H | sed s/'.define SYSLOG_OPER'// | xargs $ECHO`"
if [ -n "$SOPER" ] ; then
   SOPER=""
else
   SOPER="1"
fi
SSHU="`grep 'SYSLOG_SHUN' $OPTIONS_H | sed s/'.define SYSLOG_SHUN'// | xargs $ECHO`"
if [ -n "$SSHU" ] ; then
   SSHU=""
else
   SSHU="1"
fi
CRYPTPASS="`grep 'CRYPT_OPER_PASSWORD' $OPTIONS_H | sed s/'.define CRYPT_OPER_PASSWORD'// | xargs $ECHO`"
if [ -n "$CRYPTPASS" ] ; then
   CRYPTPASS=""
else
   CRYPTPASS="1"
fi
DOTHROTTLE="`grep 'THROTTLE_ENABLE' $OPTIONS_H | sed s/'.define THROTTLE_ENABLE'// | xargs $ECHO`"
if [ -n "$DOTHROTTLE" ] ; then
   DOTHROTTLE=""
else
   DOTHROTTLE="1"
fi
INET6="`grep 'INET6' $OPTIONS_H | sed s/'.define INET6'// | xargs $ECHO`"
if [ -n "$INET6" ] ; then
   INET6=""
else
   INET6="1"
fi
USE_SSL="`grep 'USE_SSL' $OPTIONS_H | sed s/'.define USE_SSL'// | xargs $ECHO`"
if [ -n "$USE_SSL" ] ; then
   USE_SSL=""
else
   USE_SSL="1"
fi
ADMINSERV="`grep 'ADMINSERV' $OPTIONS_H | sed s/'.define ADMINSERV'// | xargs $ECHO`"
if [ -n "$ADMINSERV" ] ; then
   ADMINSERV=""
else
   ADMINSERV="1"
fi


### Thats the end of grabbing there.
fi

#

if [ ! -f $OPTIONS_H ] ; then

FDLIMIT="1024"
MAXUSERS="1000"
MAXBUF="24" 
SUNOS=""
SOLARIS=""
DPATH="`pwd`/"
STATSN="1" # Default setting, no question asked.
SMOTD="1" # Default setting, no question asked.
HUB=""
WINGATE="1" # Default setting, no question asked.
SYSLOG="" # Default setting, no question asked.
LOGKILL="" # Default setting, no question asked.
LOGSQUIT="" # Default setting, no question asked.
LOGCONN="" # Default setting, no question asked.
SOPER="" # Default setting, no question asked.
SSHU="" # Default setting, no question asked.
MAXSENDQ="5050000" # Default setting, no question asked.
BUFPOOL="(4 * MAXSENDQLENGTH)" # Default setting, no question asked.
SERVICES_NAME="services.azzurra.org" # Default setting, no question asked.
MHOST="cybcop.azzurra.org" # Default setting, no question asked.
LOCALKLINE="kline@azzurra.org" # Default setting, no question asked.
NETWORKKLINE="kline@azzurra.org" # Default setting, no question asked.
CRYPTPASS=""
DOTHROTTLE="1" # Default setting, no question asked.
INET6=""
IRCDCONF_DELIMITER=':'
USE_SSL="1"
ADMINSERV="1" # Default setting, no question asked.
STAFF_ADDRESS="staff.azzurra.org" # Default setting, no question asked.
LOCALOP_ADDRESS="localop.azzurra.org" # Default setting, no question asked.
HELPER_ADDRESS="helper.azzurra.org" # Default setting, no question asked.

fi # ENDIF $OPTIONS_H
###############################
#
#  Ok, Now we Get into the accual configurations...

echo " "
echo "Welcome to Config for Azzurra IRCD, Version: $IRCD."
echo " "

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$FDLIMIT"
    echo ""
    echo "What are the maximum File Descriptors that the IRCD can use?"
    $ECHO "[$FOO] -> $c"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
	read cc
    else
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[1-9]*)
	    FDLIMIT="$cc"
	    ;;
	*)
	    echo ""
	    echo "You need to enter a number here."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$MAXUSERS"
    echo ""
    echo "What are the maximum number of Users you"
    echo "intend to allow on your IRC server?"
    echo "Note that you can now change this number"
    echo "on the fly with with /set command."
    $ECHO "[$FOO] -> $c"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
	read cc
    else
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[1-9]*)
	    MAXUSERS="$cc"
	    ;;
	*)
	    echo ""
	    echo "You need to enter a number here."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$MAXBUF"
    echo ""
    echo "What is the maximum connection buffer amount?"
    echo "Note, this CANNOT exceed the number of file descriptors"
    echo "minus the maximum clients."
    $ECHO "[$FOO] -> $c"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
	read cc
    else
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[1-9]*)
	    MAXBUF="$cc"
	    ;;
	*)
	    echo ""
	    echo "You need to enter a number here."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    if [ -n "$INET6" ] ; then
	FOO="Yes"
    else
	FOO="No"
    fi
    echo ""
    echo "Do you want an IPv6 Server ?"
    $ECHO "[$FOO] -> $c"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
	read cc
	runonce=Yes
    else
	cc=""
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[Yy]*)
	    INET6="1"
	    ;;
	[Nn]*)
	    INET6=""
	    ;;
	*)
	    echo ""
	    echo "You need to enter either Yes or No here..."
	    echo ""
	    FOO=""
	    ;;
    esac
done

if [ -n "$INET6" ] ; then 
     FOO="" 
     runonce="" 
     if [ "$IRCDCONF_DELIMITER" = ":" ] ; then
     	 IRCDCONF_DELIMITER='%';
     fi
     while [ -z "$FOO" ] ; do 
         FOO="$IRCDCONF_DELIMITER" 
         echo "" 
         echo "Which delimiter do you want for your ircd.conf ?" 
         $ECHO "[$FOO] -> $c" 
         if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then 
         read cc 
         else 
         cc="" 
         runonce=Yes 
         fi 
         if [ -z "$cc" ] ; then 
         cc=$FOO 
         fi 
         if [ ${#cc} -gt 1 ] ; then 
                 echo "" 
                 echo "Only 1-character wide delimiters are allowed." 
                 echo "" 
                 FOO="" 
	 else if [ "$cc" = ":" ] ; then
	 	 echo ""
		 echo "':' is not allowed as a delimiter in an ipv6 server."
		 echo ""
		 FOO=""
	 fi
         fi 
     done 
     IRCDCONF_DELIMITER=$cc 
else 
     IRCDCONF_DELIMITER=':' 
fi 

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    if [ -n "$USE_SSL" ] ; then
	FOO="Yes"
    else
	FOO="No"
    fi
    echo ""
    echo "Do you want an SSL Server ? (needs OpenSSL 0.9.6 installed)"
    $ECHO "[$FOO] -> $c"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
	read cc
	runonce=Yes
    else
	cc=""
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[Yy]*)
	    USE_SSL="1"
	    ;;
	[Nn]*)
	    USE_SSL=""
	    ;;
	*)
	    echo ""
	    echo "You need to enter either Yes or No here..."
	    echo ""
	    FOO=""
	    ;;
    esac
done

OS=`uname -a`
case "$OS" in
    *SunOS*4.*DBE*)
 	SUNOS="1"
   	echo "You are using Sun DBE, Compatibility code loaded..."
	;;
    *SunOS*5.*)
	SOLARIS="1"
	echo "You are using Sun/Solaris, Compatibility code loaded..."
	;;
esac

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="$DPATH"
    echo ""
    echo "What directory are all the server configuration files in ?"
    $ECHO "[$FOO] -> $c"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
	read cc
    else
	cc=""
	runonce=Yes
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
done
DPATH=`echo $cc | sed 's@/*$@/@'`;
mkdir -p $DPATH;
SPATH="${DPATH}ircd";

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    if [ -n "$HUB" ] ; then
	FOO="Yes"
    else
	FOO="No"
    fi
    echo ""
    echo "Would you like to compile as a HUB?"
    $ECHO "[$FOO] -> $c"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
	read cc
	runonce=Yes
    else
	cc=""
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[Yy]*)
	    HUB="1"
	    ;;
	[Nn]*)
	    HUB=""
	    ;;
	*)
	    echo ""
	    echo "You need to enter either Yes or No here..."
	    echo ""
	    FOO=""
	    ;;
    esac
done

FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    if [ -n "$CRYPTPASS" ] ; then
	FOO="Yes"
    else
	FOO="No"
    fi
    echo ""
    echo "Would you like to encrypt oper passwords in O:lines?"
    $ECHO "[$FOO] -> $c"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
	read cc
	runonce=Yes
    else
	cc=""
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[Yy]*)
	    CRYPTPASS="1"
	    ;;
	[Nn]*)
	    CRYPTPASS=""
	    ;;
	*)
	    echo ""
	    echo "You need to enter either Yes or No here..."
	    echo ""
	    FOO=""
	    ;;
    esac
done

if [ -n "$USE_SSL" ] ; then

. tools/ssl-search.sh

fi

#############
# Thats all for the user part, now to write to a file...

echo ""
echo "Thats all folks.."
$ECHO "Writing include/options.h..."

##################################################################################
rm -f $OPTIONS_H
cat > $OPTIONS_H << EOF
/*
 * include/options.h
 * VERSION: $IRCD
 *
 * This file is automatically generated and will be updated each time you
 * run Config.  
 *
 * Under normal conditions, you should not edit this file by hand.
 */
/* This ifdef is here to make sure that the config.h doesnt fuck up because of
 * multiple #defines
 */
#ifdef OPTIONS_H

#define OPTIONS_H_14 /* dont get versions mixed up */

#define DPATH "$DPATH"
#define SPATH "$SPATH"
#define MAXSENDQLENGTH $MAXSENDQ
#define BUFFERPOOL $BUFPOOL
#define HARD_FDLIMIT_  $FDLIMIT
#define INIT_MAXCLIENTS $MAXUSERS
#define MAX_BUFFER $MAXBUF
#define SERVICES_NAME "$SERVICES_NAME"
#define MAXCHANNELSPERUSER 20
#define IRCDCONF_DELIMITER '$IRCDCONF_DELIMITER'
#define DYNAMIC_CLOAKING
#define HIDEULINEDSERVS 1
#undef NO_DEFAULT_INVISIBLE
#define STAFF_ADDRESS "$STAFF_ADDRESS"
#define LOCALOP_ADDRESS "$LOCALOP_ADDRESS"
#define HELPER_ADDRESS "$HELPER_ADDRESS"
#define UNKNOWN_LISTS 1
EOF
if [ -n "$INET6" ] ; then
    echo "#define INET6" >> $OPTIONS_H
    echo "#define RECV(fd, buf, size) recvfrom(fd, buf, size, 0, 0, 0)" >> $OPTIONS_H
    echo "#define SEND(fd, buf, size) sendto(fd, buf, size, 0, 0, 0)" >> $OPTIONS_H
else
    echo "#undef INET6" >> $OPTIONS_H
    echo "#define RECV(fd, buf, size) recv(fd, buf, size, 0)" >> $OPTIONS_H
    echo "#define SEND(fd, buf, size) send(fd, buf, size, 0)" >> $OPTIONS_H
fi
if [ -n "$USE_SSL" ] ; then
    echo "#define USE_SSL" >> $OPTIONS_H
else
    echo "#undef USE_SSL" >> $OPTIONS_H
fi
if [ -n "$ADMINSERV" ] ; then
    echo "#define ADMINSERV" >> $OPTIONS_H
else
    echo "#undef ADMINSERV" >> $OPTIONS_H
fi
if [ -n "$STATSN" ] ; then
    echo "#define STATS_NOTICE" >> $OPTIONS_H
else
    echo "#undef STATS_NOTICE" >> $OPTIONS_H
fi
if [ -n "$SMOTD" ] ; then
    echo "#define SHORT_MOTD" >> $OPTIONS_H
else
    echo "#undef SHORT_MOTD" >> $OPTIONS_H
fi
if [ -n "$HUB" ] ; then
    echo "#define HUB" >> $OPTIONS_H
else
    echo "#undef HUB" >> $OPTIONS_H
fi
if [ -n "$WINGATE" ] ; then
    echo "#define WINGATE_NOTICE" >> $OPTIONS_H
else
    echo "#undef WINGATE_NOTICE" >> $OPTIONS_H
fi
if [ -n "$SYSLOG" ] ; then
    echo "#define USE_SYSLOG" >> $OPTIONS_H
else
    echo "#undef USE_SYSLOG" >> $OPTIONS_H
fi
if [ -n "$SUNOS" ] ; then
    echo "#define SUNDBE" >> $OPTIONS_H
else
    echo "#undef SUNDBE" >> $OPTIONS_H
fi
if [ -n "$SOLARIS" ] ; then
    echo "#define OS_SOLARIS" >> $OPTIONS_H
else
    echo "#undef OS_SOLARIS" >> $OPTIONS_H
fi
if [ -n "$CRYPTPASS" ] ; then
    echo "#define CRYPT_OPER_PASSWORD" >> $OPTIONS_H
else
    echo "#undef CRYPT_OPER_PASSWORD" >> $OPTIONS_H
fi
if [ -n "$DOTHROTTLE" ] ; then
    echo "#define THROTTLE_ENABLE" >> $OPTIONS_H
else
    echo "#undef THROTTLE_ENABLE" >> $OPTIONS_H
fi
cat >> $OPTIONS_H << EOF

/* Now that the simple stuff is done, we have to add some ifdef's */

#ifdef WINGATE_NOTICE
#define MONITOR_HOST "$MHOST"
#endif

#define SERVER_KLINE_ADDRESS "$LOCALKLINE"
#define NETWORK_KLINE_ADDRESS "$NETWORKKLINE"

#ifdef USE_SYSLOG
#undef SYSLOG_USERS
#undef SYSLOG_BLOCK_ALLOCATOR 
#define LOG_FACILITY LOG_LOCAL4
EOF
if [ -n "$LOGKILL" ] ; then
    echo "#define SYSLOG_KILL" >> $OPTIONS_H
else
    echo "#undef SYSLOG_KILL" >> $OPTIONS_H
fi
if [ -n "$LOGSQUIT" ] ; then
    echo "#define SYSLOG_SQUIT" >> $OPTIONS_H
else
    echo "#undef SYSLOG_SQUIT" >> $OPTIONS_H
fi
if [ -n "$LOGCONN" ] ; then
    echo "#define SYSLOG_CONNECT" >> $OPTIONS_H
else
    echo "#undef SYSLOG_CONNECT" >> $OPTIONS_H
fi
if [ -n "$SOPER" ] ; then
    echo "#define SYSLOG_OPER" >> $OPTIONS_H
else
    echo "#undef SYSLOG_OPER" >> $OPTIONS_H
fi
if [ -n "$SSHU" ] ; then
    echo "#define SYSLOG_SHUN" >> $OPTIONS_H
else
    echo "#undef SYSLOG_SHUN" >> $OPTIONS_H
fi
echo "#endif" >> $OPTIONS_H
echo "" >> $OPTIONS_H
echo "#endif /* This is the endif for the ifdef at the top. */" >> $OPTIONS_H
### use SSL ?
if [ -n "$USE_SSL" ] ; then
   cat Makefile | sed "s#^\(SSLFLAGS=\).*#\1 $SSL_INCLUDE#" > Makefile.tmp
   cat Makefile.tmp | sed "s#^\(LDFLAGS=\).*#\1 $SSL_LIB#" > Makefile
else
   cat Makefile | sed "s#^\(SSLFLAGS=\).*#\1#" > Makefile.tmp
   cat Makefile.tmp | sed "s#^\(LDFLAGS=\).*#\1#" > Makefile
fi
rm -f Makefile.tmp

echo "Done."
echo ""


if [ ! -f "$DPATH/ircd.cloak" ] ; then
FOO=""
runonce=""
while [ -z "$FOO" ] ; do
    FOO="Yes"
    echo ""
    echo "Would you like me to generate a random cloak key (1024 bits) ?"
    $ECHO "[$FOO] -> $c"
    if [ -z "$AUTO_CONFIG" -o -n "$runonce" ] ; then
	read cc
	runonce=Yes
    else
	cc=""
    fi
    if [ -z "$cc" ] ; then
	cc=$FOO
    fi
    case "$cc" in
	[Yy]*)
	    make -C tools mkcloak
	    echo ''
	    tools/mkcloak 1024 > $DPATH/ircd.cloak
	    if [ $? -ne 0 ] ; then
	        echo 'Failed, you must supply a cloak key and place it in ircd.cloak.'
	    else
	        echo 'Done.'
	    fi
	    echo 'To rebuild a random cloak key, you can use tools/mkcloak <bits>'
	    echo ''
	    ;;
	[Nn]*)
	    echo "Remember to put the correct key in $DPATH/ircd.cloak, or your server will not start !"
	    echo "If you want, you can use tools/mkcloak <bits> to generate a random cloak key."
	    ;;
	*)
	    echo ""
	    echo "You need to enter either Yes or No here..."
	    echo ""
	    FOO=""
	    ;;
    esac
done
fi

. tools/ssl-cert.sh

echo "Now your include/options.h is configured.  Please look over" 
echo "include/config.h for more server specific options."
echo "To compile your server, type 'make'."


